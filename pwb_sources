#!/usr/bin/env bash
declare PREFIX=#PREFIX#

# Get app prefix from first three characters of the called function,
# accommodating either 'pwb_sources' or 'ate_sources':
declare APP_PREFIX="${0##*/}"
APP_PREFIX="${APP_PREFIX:0:3}"

if [[ "$APP_PREFIX" != "pwb" ]] && [[ "$APP_PREFIX" != "ate" ]]; then
    echo "APP_PREFIX '$APP_PREFIX' breaks nameing convention necessary for success." >&2
    exit 1
fi

declare ATE_PATH="${PREFIX}/lib/ate_sources"
declare PWB_PATH="${PREFIX}/lib/pwb_sources"

script_exists()   { [ -f "${SOURCE_PATH}/$1" ]; }
function_loaded() { [[ $( type -f "$1" 2>/dev/null ) == "function" ]]; }

show_usage()
{
    local sname
    printf -v sname $'\e[1m%s\e[22m' "${APP_PREFIX}_sources"
    cat <<EOF
USAGE:
   $sname [help] [source_name ...]

The first three calls return information:

Display this usage message:
   $sname help

Display a list of all available sources:
   $sname

Display usage message for source ${APP_PREFIX}_exit_on_error
   $sname help ${APP_PREFIX}_exit_on_error

The final format returns a code fragment that will load and
of the listed sources that haven't already been loaded:

Use this form in a script like this, omitting the '...'
or replacing it with a continuing list of sources:
   $sname ${APP_PREFIX}_exit_on_error ...

An example of using the final form in a script:
   source <( $sname ${APP_PREFIX}_exit_on_error )
EOF
    }

return_source_name()
{
    if ! function_loaded "$1"; then
        local prefix="${1%%_*}"
        local path="${PREFIX}/lib/${prefix}_sources/$1"
        if [ -f "$path" ]; then
            echo -n "$path"
        fi
    fi
}

return_sources_script()
{
    for func in "$@"; do
        if ! function_loaded "$func"; then
            local prefix="${func%%_*}"
            local path="${PREFIX}/lib/${prefix}_sources/$func"
            if [ -f "$path" ]; then
                echo "if ! declare -f $func >/dev/null; then source $path; fi"
            fi
        fi
    done
}

show_func_doc()
{
    local path="$1"
    local IFS=$'\n'
    local -a lines=( $( grep ^##\\\([[:space:]].*\\\)\\?$ "$path" ) )

    local -i progress=0
    local line cline
    for line in "${lines[@]}"; do
        [[ "$line" =~ ^##[[:space:]](.*)$ ]]
        cline="${BASH_REMATCH[1]}"
        if [ "$progress" -eq 0 ] && [[ "$cline" == "BEGIN_DOC" ]]; then
            echo
            (( ++progress ))
        elif [ "$progress" -eq 1 ]; then
            if [[ "$cline" != "END_DOC" ]]; then
                printf "%s\n" "$cline"
            else
                (( ++progress ))
                break
            fi
        fi
    done
}

declare SOURCES_PATH="${PREFIX}/lib/${APP_PREFIX}_sources"

if [ "$#" -eq 0 ]; then
    "${SOURCES_PATH}/pwb_browser"
elif [[ "$1" == "help" ]]; then
    if [ "$#" -eq 1 ]; then
        show_usage
    else
        declare func="$2"
        declare path="${SOURCES_PATH}/$func"
        if [ -f "$path" ]; then
            source "$path"
            declare READ_ARGS_SHOW_USAGE=1
            "$func"
            show_func_doc "$path"
        else
            printf $'Unrecognized scriptlet "\e[32;1m%s\e[m"\n' "$func"
        fi
    fi
else
    return_sources_script "$@"
fi
