.TH pwb_get_scroll_bar 7
.mso gproto.tmac
.SH NAME
.B pwb_get_scroll_bar
\- get an array of characters for use in plotting a scroll bar.
.BR "pwb get_scroll_var" .
.SH SYNOPSIS
.PP
enable pwb
source <( pwb_sources pwb_get_scroll_bar )

.B pwb_get_scroll_bar
.cli_prototype @array_name !-s:sum_rows !-t:top_row !-v:visible_rows !-c:chars_count
.SH DESCRIPTION
.PP
This function gives you a set of characters to be plotted
either horizonally or vertically.
See
.B EXAMPLE
below.
.SH OPTIONS
.TP
.I array_name
is the name of the array to which the characters will be written.
.TP
.BI "-s " sum_rows
data source detail, total number of rows in the data source.
.TP
.BI "-t " top_row
data source detail, index of the top row on display.
.TP
.BI "-v " visible_rows
screen detail, the number of lines in the content area.
.TP
.BI "-c " chars_count
is the number of characters with which to fill the array.
For vertical scroll bars, this value would be the same as the
.B -v
value.
For horizontal scroll bars, this value would be the width,
in characters, over which the scroll bar should span.
.SH EXAMPLE
.PP
A scroll bar can reside on any side, but different sides
present unique requirements.
.PP
The notes following the example discuss the differences between
the three scroll bar printing strategies.
.PP
.EX
\(sh!/usr/bin/env bash

enable pwb
source <( pwb_sources pwb_get_scroll_bar )

print_line()
{
   local -n pl_data=\(dq\(Do2\(dq
   printf \(dq%-*.*s\(dq \(dq\(Do3\(dq \(dq\(Do3\(dq \(dq\(Do{pl_data[\(Do1]}\(dq
}

print_left()
{
   \(sh Get scroll bar characters
   pwb get_dimensions PHANDLE
   local -a sb_args=(
      -c \(dq\(Do{PWB_ASSOC[pager_lines]}\(dq
      -s \(dq\(Do{PWB_ASSOC[data_rows]}\(dq
      -t \(dq\(Do{PWB_ASSOC[row_top]}\(dq
      -v \(dq\(Do{PWB_ASSOC[pager_lines]}\(dq
   )
   local -a sb_chars
   pwb_get_scroll_bar sb_chars \(dq\(Do{sb_args[@]}\(dq

   \(sh Align to appropriate column
   printf \(Do\(aq\(rse[%sG\(aq \(Do(( PWB_ASSOC[margin_left] - 1 ))

   \(sh Print the scroll bar
   local newline=\(dq\(dq
   for char in \(dq\(Do{sb_chars[@]}\(dq; do
      printf \(dq%s%s\(dq \(dq\(Donewline\(dq \(dq\(Dochar\(dq
      newline=$\(aq\(rse[1D\(rse[1B\(aq
   done
}

print_right()
{
   pwb get_dimensions PHANDLE
   local -a sb_args=(
      -c \(dq\(Do{PWB_ASSOC[pager_lines]}\(dq
      -s \(dq\(Do{PWB_ASSOC[data_rows]}\(dq
      -t \(dq\(Do{PWB_ASSOC[row_top]}\(dq
      -v \(dq\(Do{PWB_ASSOC[pager_lines]}\(dq
   )
   local -a sb_chars
   pwb_get_scroll_bar sb_chars \(dq\(Do{sb_args[@]}\(dq

   local -i column=\(Do(( PWB_ASSOC[screen_cols] - PWB_ASSOC[margin_right] + 2 ))

   \(sh Avoid unwanted newline: don\(aqt print too far to the right:
   printf \(Do\(aq\(rse[%dG\(aq \(dq\(Docolumn\(dq
   for char in \(dq\(Do{sb_chars[@]}\(dq; do
      printf \(dq%s\(dq \(dq\(Dochar\(dq
      printf \(Do\(aq\(rse[%dG\(rse[1B\(aq \(dq\(Docolumn\(dq
   done
}

print_bottom()
{
   declare -A DIMS
   pwb get_dimensions PHANDLE -A DIMS

   local -i width=$(( DIMS[screen_cols] - DIMS[margin_left] - DIMS[margin_right] ))

   local -a sb_args=(
      -c \(dq\(Dowidth\(dq
      -s \(dq\(Do{DIMS[data_rows]}\(dq
      -t \(dq\(Do{DIMS[row_top]}\(dq
      -v \(dq\(Do{DIMS[pager_lines]}\(dq
   )
   local -a sb_chars
   pwb_get_scroll_bar sb_chars \(dq\(Do{sb_args[@]}\(dq

   local IFS=\(dq\(dq
   printf \(dq%s\(dq \(dq\(Do{sb_chars[*]}\(dq
}

declare -a darray=( /usr/bin/*  )

declare -a dargs=(
   darray
   \(dq\(Do{#darray[@]}\(dq
   print_line
   -l print_left
   -r print_right
   -b print_bottom
)

pwb declare PHANDLE \(dq\(Do{dargs[@]}\(dq

pwb set_margins PHANDLE 1 8

pwb init
pwb start PHANDLE
pwb restore
.EE
.PP
The cursor placement is only correct for the first character,
after that, the margin printing function must ensure the correct
position of the cursor for follow-on lines.
.PP
In
.BR print_left ,
it's easy to print a character, then move back 1 down 1 for the
next.
The
.B print_right
function avoids the risk of writing past the right screen edge
by calculating the column to print at and resets the cursor
accordingly.
.PP
The
.B bottom_print
horizontal scroll bar differs from the left and right scroll
bars in how the
.BI "-c " chars_count
option is calculated (width if content area), and how the
contents are printed (all at once on a single line).
