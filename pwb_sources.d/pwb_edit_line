# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

## BEGIN_DOC
## Unsophisiticated line editor whose main value is its ability
## to update the target of its contents while being edited.
## END_DOC

source <( pwb_sources \
              pwb_read_args     \
              pwb_exit_on_error )

pwb_edit_line()
{
    is_exit_key()
    {
        local iek_keyp="$1"
        local -n iek_keys="$2"

        for key in "${iek_keys[@]}"; do
            if [[ "$key" == "$iek_keyp" ]]; then
                return 0
            fi
        done
        return 1
    }

    local return_name exit_key_name exit_array_name
    local -i char_limit=80

    local -a func_args=( "$@" )
    local -a args_array=( return_name exit_key_name exit_array_name )
    local -a opts_list=(
        "l+" char_limit
        )

    # Self-documenting USAGE generation:
    if [ -n "$PWB_READ_ARGS_SHOW_USAGE" ]; then
        pwb_read_args func_args args_array opts_list
        return 0
    fi

    # Script-called function should have no errors, exit on argument error
    if ! pwb_read_args func_args args_array opts_list; then
        read -n -p "Script-called function should have no errors!"
        exit 1
    fi

    local -n psle_line="$return_name"
    local -n psle_exit_key="$exit_key_name"
    local exit_array_name="$exit_array_name"

    local -i curlen="${#psle_line}"

    psle_exit_key=""
    local keyp=""
    local -a exkeys=( $'\e' $'\cm' )

    pwb get_keystroke -v keyp
    if [ -n "$keyp" ]; then
        if is_exit_key "$keyp" "$exit_array_name"; then
            psle_exit_key="$keyp"
            return 1
        elif [[ "$keyp" == $'\c?' ]] && (( curlen > 0 )); then
            # erase key:
            psle_line="${psle_line:0:-1}"
        elif [[ "$keyp" =~ [[:print:]] ]] && (( curlen < char_limit )); then
            # only add printable characters
            psle_line="${psle_line}$keyp"
        fi
    fi

    return 0
}

