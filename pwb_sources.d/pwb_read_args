# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

## BEGIN_DOC
## Argument-management function that parses command line arguments,
## assigning values, and self-documents for usage display.
## 
## END_DOC
#> pwb_read_args args_array_name [var_names_array_name] [opts_list_name]
#> see test_read_args script for examples

source <( pwb_sources pwb_get_synopsis )

pwb_read_args()
{
    show_usage()
    {
        local fname="$1"
        local name_args="$2"
        local name_opts="$3"

        local -a su_lines
        pwb_get_synopsis su_lines "$name_args" "$name_opts"

        local -i maxcol=70
        printf "\nUSAGE for %s:\n" "$fname"
        printf -v curline "  %s" "$fname"

        local -i line_len part_len

        pwb measure_string -v line_len "$curline"
        local indent
        printf -v indent "%*s" "$line_len" " "

        local line
        for line in "${su_lines[@]}"; do
            pwb measure_string -v line_len "$curline"
            pwb measure_string -v part_len "$line"

            if (( (line_len + 1 + part_len) < maxcol )); then
                curline="$curline $line"
            else
                printf "%s\n" "$curline"
                curline="$indent $line"
            fi
        done

        if [ -n "$curline" ]; then
            printf "%s\n" "$curline"
        fi
    }

    # Value returned in variable named in $1 indicates how to continue:
    # If it's blank, we're done with the argument, if it has a value,
    # it's the name of the variable to set from the next argument.
    get_option_entries()
    {
        local -n goe_return="$1"
        goe_return=""
        # trim '-' prefix
        local option_progress="${2:1}"

        local opt_el opt_token opt_variable
        while [ "${#option_progress}" -gt 0 ]; do
            local progress_letter="${option_progress:0:1}"

            # Start fresh for each new progress_letter
            opt_token=""
            opt_variable=""

            # check rows in options list for match to progress_letter
            for opt_el in "${pa_opts_list[@]}"; do
                if [ -z "$opt_token" ]; then
                    opt_token="$opt_el"
                    continue
                else
                    opt_variable="$opt_el"
                fi

                # Use the opt_list row if opt_token of opt_list_row matches current arg char:
                local opt_letter="${opt_token:0:1}"
                if [[ "$opt_letter" == "$progress_letter" ]]; then
                    # advance the option_progress as soon as we make a match:
                    # either we use the value, or continue to process the next
                    # option_progress letter
                    option_progress="${option_progress:1}"

                    local -n tvar="$opt_variable"
                    if [ "${#opt_token}" -gt 1 ]; then
                        # option takes a value
                        if [ "${#option_progress}" -gt 0 ]; then
                            # if letter follow, they are the value
                            tvar="$option_progress"
                            return 0
                        else
                            # No following letters, return the variable name
                            # for the calling function to use to set with the
                            # next argument value:
                            goe_return="$opt_variable"
                            return 0
                        fi
                    else
                        # Option is a flag, just set it and return
                        tvar=1
                        # Bypass failed with deep continue
                        continue 2
                    fi
                fi
                # Setup to seek next opt_list pair:
                opt_token=""
                opt_variable=""
            done

            printf $'Unrecognized option \e[31;1m-%c\e[m.  Fix script to avoid this mistake.\n' "$progress_letter"
            read -n1 -p "Press any key to exit"
            exit 1

        done
    }

    parse_args()
    {
        local -n pa_command_args="$1"
        local -n pa_arg_names="$2"
        local -n pa_opts_list="$3"
        local -n pa_leftovers="$4"

        local -i opts_count="${#pa_opts_list[@]}"
        # Minimally validate opts array contents
        if (( opts_count % 2 != 0 )); then
            echo "Invalid array of opt args (must be paired ($opts_count))"
            read -n1 -p "opts are ${pa_opts_list[*]}"
            # Do not tolerate arguments mistakes committed by script function caller
            exit 1
        fi

        # Flag to clear when encounterin '--', following which arguments
        # will be treated as values, even if they look like an option.
        local -i option_parsing=1
        still_processing_options() { [ "$option_parsing" -eq 1 ]; }

        local -i args_index=0
        local -i args_count="${#pa_arg_names[@]}"
        local var_name
        local -i clas_index=0

        for arg in "${pa_command_args[@]}"; do
            # If previous pass identified an option that sets a value,
            # set the value and clear the var_name variable.
            if [ -n "$var_name" ]; then
                local -n tvar="$var_name"
                tvar="$arg"
                var_name=""
            else
                if still_processing_options && [[ "$arg" =~ ^-. ]]; then
                    if [[ "$arg" == "--" ]]; then
                        option_parsing=0
                    else
                        # if 'var_name' is set on return, var_name is the variable
                        # to set with the value of the next CL argument
                        get_option_entries var_name "$arg"
                    fi
                    # not an option, set next positional argument
                elif (( args_index < args_count )); then
                    var_name="${pa_arg_names[$(( args_index++ ))]}"
                    local -n tvar="$var_name"
                    tvar="$arg"
                    var_name=""
                else
                    pa_leftovers+=( "$arg" )
                fi
            fi
        done
    }

    #################################
    ###   EXECUTION BEGINS HERE   ###
    #################################

    local -a empty_array=()
    local command_args_array="${1:-empty_array}"
    local arg_names_array="${2:-empty_array}"
    local opts_list_array="${3:-empty_array}"
    local leftovers_array="${4:-empty_array}"

    # Show usage and return if environment var is set:
    if [ -n "$READ_ARGS_SHOW_USAGE" ]; then
        # Prevent recursion when pwb_get_synopsis call pwb_read_args
        unset READ_ARGS_SHOW_USAGE

        local funcname="${FUNCNAME[@]: -2:1}"

        # Using FUNCNAME[0]} to protect against renaming this script:
        if [[ "$funcname" == "${FUNCNAME[0]}" ]]; then
            local -a arg_names=(
                command_args_array
                arg_names_array
                opts_list_array
                leftovers_array
            )
            show_usage "$funcname" arg_names empty_array
        else
            show_usage "$funcname" "$arg_names_array" "$opts_list_array"
        fi
        return 1
    else
        parse_args "$command_args_array" \
                   "$arg_names_array"    \
                   "$opts_list_array"    \
                   "$leftovers_array"
        return "$?"
    fi
}

