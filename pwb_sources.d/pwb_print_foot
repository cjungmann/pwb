# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

#> pwb_print_foot handle strings_array_name [-j (l|c|r)]

pwb_print_foot()
{
    set -e
    ate_confirm_functions \
        pwb_read_args
    set +e

    local handle_name array_name
    local justified=c

    local -a args_names=( handle_name array_name )
    local -a opts_list=(
        j justified
    )

    # Name the arguments array:
    local -a args_copy=( "$@" )

    if pwb_read_args args_copy args_names opts_list; then
        if [ -z "$handle_name" ]; then
            read -n1 -p "Require handle name to discern margin limits."
            exit 1
        elif [ -z "$array_name" ]; then
            read -n1 -p "Require name of array of lines to print."
            exit 1
        elif ! [[ "$justified" =~ l|c|r ]]; then
            read -n1 -p "Justified value must be l, c, or r"
            exit 1
        fi
    else
        exit 1
    fi

    pwb get_dimensions "$handle_name"
    pwb_exit_on_error
    local -i max_line_number="${PWB_ASSOC[screen_lines]}"
    local -i screen_width="${PWB_ASSOC[screen_cols]}"
    local -i lineno=$(( PWB_ASSOC[screen_lines] - PWB_ASSOC[margin_bottom] + 1 ))

    local -n pph_lines="$array_name"

    # Get longest line length
    local -i curlen maxlen=0
    local -i left static_left
    for line in "${pph_lines[@]}"; do
        pwb measure_string "$line" -v curlen
        (( maxlen = curlen > maxlen ? curlen : maxlen ))
    done
    # impose sanity:
    (( maxlen = (screen_width < maxlen) ? screen_width : maxlen ))
    (( static_left = ( screen_width - maxlen ) / 2 ))

    # left-justified never needs to change left
    if [[ "$justified" == "l" ]]; then
        (( left = static_left ))
    fi

    # default value is for left-justified:
    local -i linelen="$maxlen"
    local line
    for line in "${pph_lines[@]}"; do
        if (( lineno <= max_line_number )); then
            if [[ "$justified" != "l" ]]; then
                pwb measure_string "$line" -v linelen
                pwb_exit_on_error
                if (( linelen > screen_width )); then
                    linelen=screen_width;
                    left=1
                else
                    (( left = static_left ))
                    if [[ "$justified" == "c" ]]; then
                        (( left = ( screen_width - linelen ) / 2 ))
                    elif [[ "$justified" == "r" ]]; then
                        (( left = static_left + maxlen - linelen ))
                    else
                        (( left = static_left ))
                    fi
                fi
            fi

            # Erase entire line, then position for the line
            printf $'\e[%d;1H\e[2K\e[%dG' "$lineno" "$left"

            pwb limit_print "$linelen" "$line"
            pwb_exit_on_error
            (( ++lineno ))
        fi
    done

    while (( lineno <= max_line_number )); do
        printf $'\e[%d;1H\e[2K' "$lineno"
        (( ++lineno ))
    done
}
