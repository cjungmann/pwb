# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

## BEGIN_DOC
## Displays an array of lines in a screen-centered box.
## If called with a 'dims_name', the array with that name will
## be filled with the dimensions of the displayed block.  Pass
## the dimensions array name to pwb_erase_dims to clear the
## area covered by the message box.
## END_DOC

source <( pwb_sources pwb_read_args )


declare PSM_CHAR_HORZ=$'\u2500'
declare PSM_CHAR_VERT=$'\u2502'
declare PSM_CHAR_UL=$'\u250C'
declare PSM_CHAR_UR=$'\u2510'
declare PSM_CHAR_LL=$'\u2514'
declare PSM_CHAR_LR=$'\u2518'

pwb_print_message()
{
    local lines_name dims_name

    local -a cmd_args=( "$@" )
    local -a names_array=( lines_name )
    local -a opts_list=(
        a+  dims_name
    )

    # Parse args, return if calling for usage info only
    if ! pwb_read_args cmd_args names_array opts_list; then
        return 0
    fi

    local -n ppm_lines="$lines_name"

    # From submitted lines, get count and maximum length
    local -i curlen maxlen=0
    local -i count=0

    for ppm_line in "${ppm_lines[@]}"; do
        pwb measure_string -v curlen "$ppm_line"
        (( maxlen = curlen>maxlen ? curlen : maxlen ))
        (( ++count ))
    done

    # Get screen dimensions
    pwb get_dimensions

    # UL origin of text box
    local -i pleft ptop
    (( pleft = (PWB_ASSOC[screen_cols] - maxlen - 2) / 2 ))
    (( ptop = (PWB_ASSOC[screen_lines] - count - 2) / 2 ))
    # Cursor to origin
    printf $'\e[%d;%dH' "$ptop" "$pleft"

    # Prepare repeat-use strings
    local lf_position right_border
    # LF/CR, erase next line domain
    printf -v lf_position $'\e[1E\e[%dG\e[%dX' "$pleft" $(( maxlen+2 ))
    # Right to border, print border character
    printf -v right_border $'\e[%dG%s' $(( pleft + maxlen + 1 )) "$PSM_CHAR_VERT"

    # print top line
    local scratch
    printf -v scratch "%s%*s%s" "$PSM_CHAR_UL" "$maxlen" $' ' "$PSM_CHAR_UR"
    # Convert spaces to horizontal lines
    printf "%s" "${scratch// /$PSM_CHAR_HORZ}"

    # print contents
    for ppm_line in "${ppm_lines[@]}"; do
        printf "%s" "$lf_position"
        printf "$PSM_CHAR_VERT"
        pwb limit_print "$maxlen" "$ppm_line"
        printf "%s" "$right_border"
    done

    # Move to bottom line
    printf "%s" "$lf_position"
    # print bottom line
    printf -v scratch "%s%*s%s" "$PSM_CHAR_LL" "$maxlen" $' ' "$PSM_CHAR_LR"
    printf "%s" "${scratch// /$PSM_CHAR_HORZ}"
    # Push the cursor up and out of the way:
    printf $'\e[1;1H'

    if [ -n "$dims_name" ]; then
        local -n psm_dims="$dims_name"
        psm_dims=( "$ptop" "$pleft" $(( 2 + count )) $(( 2 + maxlen )) )
    fi
}
