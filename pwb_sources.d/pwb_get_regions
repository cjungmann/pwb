# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

## BEGIN_DOC
## Calculates four values (top, left, width, height) for each of the five
## regions (content, top-margin, bottom-margin, left-margin, right-margin).
## The values can be used by pwb_print_array to safely print one of the
## regions.
##
## Call this function with a declared associative array, into which the
## dimensions will be set.
##
## The associative array indexes will have prefixes to indicate the
## region:
## CO for content, TM: top margin, BM: bottom margin, LM: left margin,
## an RM for right margin.
##
## The index suffixes will be LEFT, TOP, WIDE, and LINES.
##
## Example:
##     declare -A MAA
##     pwb_get_regions MAA pwb_handle
##     pwb_print_array lines_array \
##                  -t "${MAA[RM_TOP]}"   \
##                  -l "${MAA[RM_LEFT]}"  \
##                  -w "${MAA[RM_WIDE]}"  \
##                  -c "${MAA[RM_LINES]}"
##
## In addition to region dimensions, the associative array includes
## elemnts with indexes SC_WIDE and SC_LINES for screen width and
## screen height.
##
## The function returns true (0) upon success.  No extra information
## is prepared for a failure.  Just check your parameters.
##
## END_DOC

source <( pwb_sources \
              pwb_read_args     \
              pwb_exit_on_error )

pwb_get_regions()
{
    validate_args()
    {
        local -i good_handle=0 good_array=0
        if [ -n "$handle_name" ] && pwb get_data_count "$handle_name"; then
            good_handle=1
        fi
        if [ -n "$assoc_array_name" ]; then
            local pline
            if pline=$( declare -p "$assoc_array_name" ); then
                if [[ "$pline" =~ ^declare\ -A\ "$assoc_array_name"$ ]]; then
                    good_array=1
                fi

            fi
        fi

        # returns error code:
        [ "$good_handle" -ne 0 ] && [ "$good_array" -ne 0 ]
    }

    get_values()
    {
        local -n gv_aarray="$assoc_array_name"
        gv_aarray=()

        local -A pgr_A
        pwb get_dimensions "$handle_name" -A pgr_A
        pwb_exit_on_error

        # Screen dimensions
        gv_aarray[SC_LINES]="${pgr_A[screen_lines]}"
        gv_aarray[SC_WIDE]="${pgr_A[screen_cols]}"

        # Content region:
        gv_aarray[CO_TOP]=$(( pgr_A[margin_top] + 1 ))
        gv_aarray[CO_LEFT]=$(( pgr_A[margin_left] + 1 ))
        gv_aarray[CO_WIDE]=$(( pgr_A[screen_cols] \
                                        - pgr_A[margin_left] \
                                        - pgr_A[margin_right] ))
        gv_aarray[CO_LINES]=$(( pgr_A[screen_lines] \
                                         - pgr_A[margin_top] \
                                         - pgr_A[margin_bottom] ))
        # Top Margin region:
        gv_aarray[TM_LEFT]="${gv_aarray[CO_LEFT]}"
        gv_aarray[TM_WIDE]="${gv_aarray[CO_WIDE]}"
        gv_aarray[TM_TOP]="1"
        gv_aarray[TM_LINES]="${pgr_A[margin_top]}"

        # Bottom Margin region
        gv_aarray[BM_LEFT]="${gv_aarray[CO_LEFT]}"
        gv_aarray[BM_WIDE]="${gv_aarray[CO_WIDE]}"
        gv_aarray[BM_TOP]=$(( pgr_A[screen_lines] - pgr_A[margin_bottom] + 1 ))
        gv_aarray[BM_LINES]="${pgr_A[margin_bottom]}"

        # Left Margin region:
        gv_aarray[LM_TOP]="${gv_aarray[CO_TOP]}"
        gv_aarray[LM_LINES]="${gv_aarray[CO_LINES]}"
        gv_aarray[LM_LEFT]=1
        gv_aarray[LM_WIDE]="${pgr_A[margin_left]}"

        # Right Margin region:
        gv_aarray[RM_TOP]="${gv_aarray[CO_TOP]}"
        gv_aarray[RM_LINES]="${gv_aarray[CO_LINES]}"
        gv_aarray[RM_LEFT]=$(( pgr_A[screen_cols] - pgr_A[margin_right] + 1 ))
        gv_aarray[RM_WIDE]=$(( pgr_A[margin_right] ))
    }

    local handle_name assoc_array_name

    local -a cmd_args=( "$@" )
    local -a name_array=( assoc_array_name handle_name )

    if pwb_read_args cmd_args name_array ""; then
        if validate_args; then
            get_values
            return 0
        fi
    fi

    return 1
}
