# -*- mode:shell-script; sh-shell:bash  -*-
# shellcheck shell=bash
# shellcheck disable=SC2317

## BEGIN_DOC
## This script uses `pwb` for presenting a set of scripts that
## demonstrate various concepts in developing applications with the
## tool.
## END_DOC

source <( pwb_sources \
              pwb_read_args      \
              pwb_exit_on_error  \
              pwb_get_margins    \
              pwb_get_regions    \
              pwb_print_array    \
              pwb_conduct_dialog \
              pwb_print_message  \
              pwb_erase_dims     \
        )

pwb_scripts_browser()
{
    ##########################
    ###   Exec Delegates   ###
    ##########################

    default_show_man()
    {
        local -a saved_margins
        pwb_get_margins saved_margins PSB_PHANDLE
        pwb set_margins PSB_PHANDLE 0
        pwb_exit_on_error

        local TERMCAP_ti=""
        local TERMCAP_te=""
        printf $'\e[2J'

        local path="${1}.7"
        if [ -f "$path" ]; then
            man -l "$path"
        else
            show_message "Man page file '$path' not found'"
        fi

        printf $'\e[2J'
        TERMCAP_te="$OLD_te"
        TERMCAP_ti="$OLD_ti"

        pwb set_margins PSB_PHANDLE "${saved_margins[@]}"
    }

    default_show_source()
    {
        local TERMCAP_ti=""
        local TERMCAP_te=""
        printf $'\e[2J'

        local path="$1"
        less "$path"

        printf $'\e[2J'
        TERMCAP_te="$OLD_te"
        TERMCAP_ti="$OLD_ti"
    }

    default_run_script()
    {
        local path="$1"
        "$path"
    }

    default_show_help()
    {
        local path="$1"
        local -a lines=(
            "Use arrow keys to navigate."
            ""
        )
        dsh_add_line()
        {
            printf -v tline $'\e[32;1m%-5s\e[39;22m %s' "$1" "$2"
            lines+=( "$tline" )
        }

        local -a bindarr
        local -n bkey=bindarr[0]
        local -n bfunc=bindarr[1]
        local -n bdesc=bindarr[2]

        for el in "${PSB_KEYBINDINGS[@]}"; do
            case "${#bindarr[*]}" in
                0) bindarr+=( "$el" ) ;;
                1) bindarr+=( "$el" ) ;;
                2) bindarr+=( "$el" )
                   if [[ "$bkey" == $'\cm' ]]; then
                       bkey="ENTER"
                   fi
                   dsh_add_line "$bkey" "$bdesc"
                   bindarr=()
                   ;;
                esac
        done

        dsh_add_line "q" "Exit"

        pwb_print_message lines
        read -sn1
    }

    #####################
    ###   Utilities   ###
    #####################

    # Shortcut allowing permitting calls without an array:
    show_message()
    {
        local lines=( "$@" )
        pwb_conduct_dialog lines PSB_HANDLE
    }

    # Make an arg list to pass directly to pwb_print_array
    # for printing in a margin.
    get_region_args()
    {
        local -n gra_array="$1"
        local -n gra_assoc="$2"
        local reg="$3"

        gra_array=(
            -t "${gra_assoc[${reg}_TOP]}"
            -l "${gra_assoc[${reg}_LEFT]}"
            -w "${gra_assoc[${reg}_WIDE]}"
            -c "${gra_assoc[${reg}_LINES]}"
        )
    }

    # Somewhat self-indulgent implementation with a loop
    # indirectly calling line processing functions, the
    # reference to which changes according to the state
    # of the text extraction.
    get_file_doc()
    {
        local -n gfd_array="$1"
        local path="$2"

        local cur_func

        find_doc()
        {
            if [[ "$REPLY" == "## BEGIN_DOC" ]]; then
                cur_func=save_line;
            fi
            return 0
        }

        save_line()
        {
            if [[ "$REPLY" =~ ^\#\#([[:space:]](.*)?)? ]]; then
                if [ "${#BASH_REMATCH[@]}" -eq 1 ]; then
                    gfd_array+=( "" )
                elif [[ "${BASH_REMATCH[2]}" == END_DOC ]]; then
                    return 1
                else
                    gfd_array+=( "${BASH_REMATCH[2]}" )
                fi

                return 0
            fi

            return 1
        }

        cur_func=find_doc

        while read -r; do
            if ! $cur_func; then
                break
            fi
        done < "$path"
    }

    get_max_len()
    {
        local -n gml_max_len="$1"
        local -n gml_array="$2"
        local -i cur_len

        gml_max_len=0
        for line in "${gml_array[@]}"; do
            cur_len="${#line}"
            (( gml_max_len = ( cur_len > gml_max_len ? cur_len : gml_max_len ) ))
        done
    }

    #########################
    ###   PWB CALLBACKS   ###
    #########################

    print_line()
    {
        local -i index="$1"
        local -n pl_array="$2"
        local -i chars_limit="$3"

        printf "%-*.*s" "$chars_limit" "$chars_limit" "${pl_array[$index]}"
    }

    print_right()
    {
        local -i index="$1"
        local -n pl_array="$2"

        local script="${pl_array[$index]}"
        local spath="${PSB_PATH}/$script"

        local -a pr_lines
        get_file_doc pr_lines "$spath"

        local -a args
        get_region_args args PSB_REGIONS RM

        # pwb_print_array "${args[@]}" -jl args
        pwb_print_array -jl "${args[@]}" pr_lines
    }

    print_top()
    {
        local title="${6:-Script Browser}"
        local -a pt_lines=(
            ""
            "$title"
            $'Press \e[32;1m?\e[39;22m for help, \e[32;1mq\e[39;22m to quit.'
        )

        local -a args=(
            -t 1
            -l 1
            -w "${PSB_REGIONS[SC_WIDE]}"
            -c "${PSB_REGIONS[TM_LINES]}"
        )

        pwb_print_array -jc "${args[@]}" pt_lines
    }

    exec_line()
    {
        local keyp="$1"
        local -i index="$2"
        local -n el_array="$3"
        local el_pwb_name="$4"

        local base="${el_array[$index]}"
        local base_path="${PSB_PATH}/${base}"

        local -a bindarr
        local -n bkey=bindarr[0]
        local -n bfunc=bindarr[1]
        local -n bdesc=bindarr[2]

        local -a saved_margins
        pwb_get_margins saved_margins "$el_pwb_name"
        pwb set_margins "$el_pwb_name" 0

        for el in "${PSB_KEYBINDINGS[@]}"; do
            case "${#bindarr[*]}" in
                0) bindarr+=( "$el" ) ;;
                1) bindarr+=( "$el" ) ;;
                2)
                    if [[ "$keyp" == "${bindarr[0]}" ]]; then
                        "$bfunc" "$base_path" "$el_pwb_name"
                        break
                    fi
                    bindarr=()
                    ;;
                esac
        done

        printf $'\e[2J'
        pwb set_margins "$el_pwb_name" "${saved_margins[@]}"
        pwb print_all "$el_pwb_name"
    }

    ##########################
    ###   Prep Functions   ###
    ##########################

    # Content area should be just large enough to contain the script
    # names, most of the remaining space to be distributed to the
    # right margin for the script docs.
    prepare_margins()
    {
        local phandle="$1"
        local arr_name="$2"
        local -i max_len
        get_max_len max_len "$arr_name"

        local -i left_margin=2

        pwb get_dimensions
        local -a margins=(
            # Top margin:
            5
            # right margin:
            $(( PWB_ASSOC[screen_cols] - max_len - left_margin - 2 ))
            # bottom
            2
            # left
            "$left_margin"
        )

        pwb set_margins "$phandle" "${margins[@]}"
    }

    prepare_keymap()
    {
        local  new_keymap_name="$1"
        local -a bindarr
        local -n bkey=bindarr[0]
        local -n bfunc=bindarr[1]
        local -n bdesc=bindarr[2]

        local -a pk_keymap=()

        for el in "${PSB_KEYBINDINGS[@]}"; do
            case "${#bindarr[*]}" in
                0) bindarr+=( "$el" ) ;;
                1) bindarr+=( "$el" ) ;;
                2) bindarr+=( "$el" )
                   pk_keymap+=( "$bkey" 7 )
                   bindarr=()
                   ;;
                esac
        done

        pwb declare_keymap "$new_keymap_name" pk_keymap
        pwb_exit_on_error
    }

    start_browser()
    {
        local -n sb_args="$1"
        local scripts_list_name="$2"

        local PSB_PHANDLE
        pwb declare PSB_PHANDLE "${pargs[@]}"
        pwb_exit_on_error

        local loc_keymap
        prepare_keymap loc_keymap

        # Establish margins, then make global regions array
        prepare_margins PSB_PHANDLE "$scripts_list_name"
        local -A PSB_REGIONS
        pwb_get_regions PSB_REGIONS PSB_PHANDLE

        pwb start PSB_PHANDLE -a loc_keymap
    }

    ############################
    ###   EXECUTION BEGINS   ###
    ############################

    # Save original "cup mode" values to prevent
    # nesting of initializations:
    local OLD_ti="$TERMCAP_ti"
    local OLD_te="$TERMCAP_te"

    local -a PSB_DEFAULT_KEYS_ARRAY=(
        $'\cm' default_run_script    "Run the script"
        '?'    default_show_help     "Show help page"
        'm'    default_show_man      "Show man page"
        's'    default_show_source   "Show script source"
    )

    #######################################
    ###   Prepare to Accept Arguments   ###
    #######################################
    local scripts_list scripts_path custom_keys_array

    local -a cmd_args=( "$@" )
    local -a arg_names=( scripts_list scripts_path )
    local -a opts_list=(
        k+ custom_keys_array
    )

    local psb_keybind_name="PSB_DEFAULT_KEYS_ARRAY"

    if pwb_read_args cmd_args arg_names opts_list; then

        if [ -n "$custom_keys_array" ]; then
            psb_keybind_name="$custom_keys_array"
        fi

        # Establish Keybindsings array for declare_keymap, exec_line, show_help.
        local -n PSB_KEYBINDINGS="$psb_keybind_name"

        local PSB_PATH="$scripts_path"

        # Need working array to get its length
        local -n psb_list="$scripts_list"

        local -a pargs=(
            "$scripts_list"
            "${#psb_list[@]}"
            print_line
            -r print_right
            -t print_top
            -e exec_line
        )

        start_browser pargs psb_list
    fi
}

