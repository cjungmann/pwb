.TH pwb_edit_line 7
.mso gproto.tmac
.SH NAME
.B pwb_edit_line
\- somewhat lame text editing tool that allows per-character action.
.SH SYNOPSIS
.PP
enable pwb
.br
source <( pwb_sources pwb_edit_line )

.B pwb_edit_line
.cli_prototype @return_name @exit_key_name ?@exit_key_array ?!-l:char_limit
.SH DESCRIPTION
.PP
This and that for now.  Will return after finishing
.BR OPTIONS .
.SH OPTIONS
.TP
.I return_name
is the name of the variable that contains the current line contents.
.TP
.I exit_key_name
is the name of the variable that will be set with the key that terminates
the
.I pwb_edit_line
interaction.
At minimum, use this value to see if the user abandoned or completed
the interaction.
.TP
.I exit_key_array
is the name of an array of keystroke strings that should trigger the
end of the interaction.
.IP
There is a default array containing the ESC and ENTER keys.  This will
be used if an
.B exit_key_array
value is not providedd.
.TP
.BI "-l " char_limit
is the maximum number of characters accepted in the edit line.
Use this option to restrict the length to fit in a dialog display.
.SH EXAMPLE
.PP
The following is a complete working script.  Scan the code for
a bold comment line that helps pinpoint where
.B pwb_eidt_line
is used.
.EX
#!/usr/bin/env bash

enable pwb
source <( pwb_sources pwb_edit_line     \(rs
                      pwb_print_message \(rs
                      pwb_erase_dims    \(rs
                      pwb_printf_limited )

get_name()
{
    local gn_name
    local exit_key

    local caption=\(dq     Please Enter Your Name     \(dq
    local entered_name=\(dq\(dq
    local -i width=\(dq\(Do{#caption}\(dq

    local -a dlg_lines=(
        \(dq\(Docaption\(dq
        \(dq \(dq
        \(Do\(aqPress \(rse[32;1mENTER\(rse[39;22m to save.\(aq
        \(Do\(aqPress \(rse[32;1mESC\(rse[39;22m to abort.\(aq
    )

    # Itemize then concatenate complicated format string:
    local -a format_parts=(
        \(Do\(aq\(rse[48;2;64;64;64m\(aq  # start background color
        \(dq%s\(dq                  # print the value
        \(Do\(aq\(rse[5m_\(rse[25m\(aq       # print the blinking cursor
        \(Do\(aq%*s\(rse[49m\(aq          # extra spaces, restore background
    )
    IFS=\(dq\(dq
    local format=\(dq\(Do{format_parts[*]}\(dq

    local -a printf_args=(
        \(dq\(Dowidth\(dq          # for printf argument
        \(dq\(Doformat\(dq
        \(dq\(Doentered_name\(dq   # printf_args[2]
        \(dq\(Dowidth\(dq          # for extra spaces format conversion
        \(dq \(dq               # need value for %s
    )

    local -a dlg_dims
    while :; do
        dlg_lines[1]=\(Do( pwb_printf_limited \(dq\(Do{printf_args[@]}\(dq )
        pwb_print_message dlg_lines -a dlg_dims

        \fB\(sh pwb_edit_line instance next line:\fR
        if pwb_edit_line entered_name exit_key -l \(dq\(Dowidth\(dq; then
            # pwb_edit_line returned true to continue interaction.
            # Set dialog line for next pass:
            printf_args[2]=\(dq\(Doentered_name\(dq
            pwb_erase_dims dlg_dims
        else
            # pwb_edit_line returns false after any exit key pressed:
            # Clear screen and show the outcome
            pwb_erase_dims dlg_dims
            local -a msg=( \(dqDialog result:\(dq \(dq\(dq )
            case \(dq\(Doexit_key\(dq in
                \(Do\(aq\(rscm\(aq ) msg+=( \(dqWould be saving \(aq\(Doentered_name\(aq\(dq ) ;;
                \(Do\(aq\(rse\(aq  ) msg+=( \(dqWould be abandoning changes\(dq ) ;;
            esac

            msg+=( \(dq\(dq \(dqPress any key to leave.\(dq )

            pwb_print_message msg
            read -n1

            break
        fi
    done
}

pwb init
get_name
pwb restore
.EE
